{"version":3,"sources":["header.jpg","components/Work.tsx","components/WorksList.tsx","containers/WorksListContainer.tsx","utils/api.ts","App.tsx","registerServiceWorker.js","index.tsx"],"names":["module","exports","__webpack_require__","p","Work","_ref","work","className","border","react_default","a","createElement","href","url","target","rel","src","concat","id","alt","title","summary","WorksList","works","map","key","src_components_Work","WorksListContainer","_useState","useState","_useState2","Object","slicedToArray","setWorks","useEffect","fetch","then","res","json","src_components_WorksList","App","year","Date","getFullYear","Fragment","header","containers_WorksListContainer","index_es","icon","faGithub","size","faTwitter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.88276f4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.c6b29b49.jpg\";","import React, { FC } from 'react'\nimport './Work.css'\n\ninterface Props {\n  work: Work;\n}\n\nconst Work: FC<Props> = ({\n  work\n}) => {\n  const className = work.border ? 'work__img work__img--border' : 'work__img'\n\n  return (\n    <div className=\"work\">\n      <a href={work.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        <figure className={className}>\n          <img src={`images/${work.id}.jpg`} alt={work.title} />\n        </figure>\n      </a>\n      <h3 className=\"work__title\">\n        <a href={work.url} target=\"_blank\" rel=\"noopener noreferrer\">{work.title}</a>\n      </h3>\n      <p className=\"work__summary\">{work.summary}</p>\n    </div>\n  )\n}\n\nexport default Work\n","import React, { FC } from 'react'\nimport Work from './Work'\nimport './WorksList.css'\n\ninterface Props {\n  works: Work[];\n}\n\nconst WorksList: FC<Props> = ({\n  works\n}) => (\n  <section className=\"section\">\n    <h2 className=\"headline\">Featured Work</h2>\n    <ul className=\"featured-work\">\n      {works.map((work: Work) => (\n        <li key={work.id}>\n          <Work work={work} />\n        </li>\n      ))}\n    </ul>\n  </section>\n)\n\nexport default WorksList\n","import React, { FC, useState, useEffect } from 'react'\nimport { getWorks } from '../utils/api'\nimport WorksList from '../components/WorksList'\n\nconst WorksListContainer: FC = () => {\n  const [works, setWorks] = useState<Work[]>([])\n\n  useEffect(() => {\n    getWorks()\n      .then((works: Work[]) => {\n        setWorks(works)\n      })\n  }, [])\n\n  return (\n    <WorksList works={works} />\n  )\n}\n\nexport default WorksListContainer\n","export const getWorks = () =>\n  fetch('works.json')\n    .then(res => res.json())\n","import React, { FC } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub, faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport WorksListContainer from './containers/WorksListContainer'\nimport './App.css'\nimport header from './header.jpg'\n\nconst App: FC = () => {\n\n  const year = new Date().getFullYear()\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1 className=\"header__logo\">Misaki's Portfolio Website</h1>\n      </header>\n      <main className=\"main\">\n        <header className=\"hero\">\n          <h2 className=\"hero__title\">Hello, I'm Misaki!</h2>\n          <img className=\"hero__img\" src={header} alt=\"\" />\n        </header>\n        <WorksListContainer />\n      </main>\n      <footer className=\"footer\">\n        <div className=\"footer__inner profile\">\n          <h2 className=\"headline\">About Me</h2>\n          <p className=\"profile__bio\">Hello, I'm Misaki, a front end developer, based in Japan.</p>\n          <ul className=\"footer__nav\">\n            <li className=\"footer__nav-item\">\n              <a href=\"https://github.com/mokajima/\">\n                <FontAwesomeIcon icon={faGithub} size=\"2x\" />\n              </a>\n            </li>\n            <li className=\"footer__nav-item\">\n              <a href=\"https://twitter.com/mokajima85z\">\n                <FontAwesomeIcon icon={faTwitter} size=\"2x\" />\n              </a>\n            </li>\n          </ul>\n        </div>\n        <p className=\"copyright\">\n          <small>&copy; {year} Misaki's Portfolio Website</small>\n        </p>\n      </footer>\n    </>\n  )\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}